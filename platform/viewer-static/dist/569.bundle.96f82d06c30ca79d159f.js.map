{"version":3,"file":"569.bundle.96f82d06c30ca79d159f.js","mappings":"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","sources":["file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts","file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(\n  ToolGroupService,\n  toolGroupId,\n  extensionManager\n) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.tools'\n  );\n\n  const { toolNames, Enums } = utilityModule.exports;\n\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\n  };\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\n}\n\nexport default createSEGToolGroupAndAddTools;\n","async function _hydrateSEGDisplaySet({\n  segDisplaySet,\n  viewportIndex,\n  toolGroupId,\n  servicesManager,\n}) {\n  const {\n    SegmentationService,\n    HangingProtocolService,\n    ViewportGridService,\n  } = servicesManager.services;\n\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await SegmentationService.createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  SegmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = ViewportGridService.getState();\n\n  const updatedViewports = HangingProtocolService.getViewportsRequireUpdate(\n    viewportIndex,\n    displaySetInstanceUID\n  );\n\n  ViewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, index) => {\n    if (index === viewportIndex) {\n      return;\n    }\n\n    const shouldDisplaySeg = SegmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      ViewportGridService.setDisplaySetsForViewport({\n        viewportIndex: index,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: 'volume',\n          toolGroupId,\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  return true;\n}\n\nexport default _hydrateSEGDisplaySet;\n","import hydrateSEGDisplaySet from './_hydrateSEG';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateSEG({\n  servicesManager,\n  segDisplaySet,\n  viewportIndex,\n  toolGroupId = 'default',\n}) {\n  const { UIViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function(resolve, reject) {\n    const promptResult = await _askHydrate(\n      UIViewportDialogService,\n      viewportIndex\n    );\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      const isHydrated = await hydrateSEGDisplaySet({\n        segDisplaySet,\n        viewportIndex,\n        toolGroupId,\n        servicesManager,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(UIViewportDialogService, viewportIndex) {\n  return new Promise(function(resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: 'secondary',\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportIndex,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateSEG;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport {\n  Notification,\n  ViewportActionBar,\n  useViewportGrid,\n  useViewportDialog,\n  LoadingIndicatorProgress,\n} from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\n\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport _getStatusComponent from './_getStatusComponent';\n\nconst { formatDate } = utils;\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const { t } = useTranslation('SEGViewport');\n\n  const {\n    DisplaySetService,\n    ToolGroupService,\n    SegmentationService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\n\n  // States\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    segmentIndex: 1,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const {\n      displaySet: referencedDisplaySet,\n    } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, segDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n        // initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [viewportIndex, segDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\n      const segmentation = SegmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      SegmentationService.jumpToSegmentCenter(\n        segmentationId,\n        newSelectedSegmentIndex,\n        toolGroupId\n      );\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportIndex,\n      segDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportIndex, segDisplaySet, segIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = SegmentationService.subscribe(\n      SegmentationService.EVENTS.SEGMENTATION_PIXEL_DATA_CREATED,\n      evt => {\n        if (\n          evt.segDisplaySet.displaySetInstanceUID ===\n          segDisplaySet.displaySetInstanceUID\n        ) {\n          setSegIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = SegmentationService.subscribe(\n      SegmentationService.EVENTS.SEGMENT_PIXEL_DATA_CREATED,\n      ({ segmentIndex, numSegments }) => {\n        setProcessingProgress({\n          segmentIndex,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = ToolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    toolGroup = createSEGToolGroupAndAddTools(\n      ToolGroupService,\n      toolGroupId,\n      extensionManager\n    );\n\n    setToolGroupCreated(true);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n\n      ToolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(segDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n      referencedDisplaySetRef.current = null;\n    };\n  }, [segDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const onPillClick = () => {\n    promptHydrateSEG({\n      servicesManager,\n      viewportIndex,\n      segDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onPillClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorProgress\n            className=\"w-full h-full\"\n            progress={\n              processingProgress.totalSegments !== null\n                ? ((processingProgress.segmentIndex + 1) /\n                    processingProgress.totalSegments) *\n                  100\n                : null\n            }\n            textBlock={\n              !processingProgress.totalSegments ? (\n                <span className=\"text-white text-sm\">Loading SEG ...</span>\n              ) : (\n                <span className=\"text-white text-sm flex items-baseline space-x-2\">\n                  <div>Loading Segment</div>\n                  <div className=\"w-3\">{`${processingProgress.segmentIndex}`}</div>\n                  <div>/</div>\n                  <div>{`${processingProgress.totalSegments}`}</div>\n                </span>\n              )\n            }\n          />\n        )}\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportIndex === viewportIndex && (\n            <Notification\n              id=\"viewport-notification\"\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSEGViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSEGViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\n\nexport default function _getStatusComponent({ isHydrated, onPillClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n            backgroundColor: '#98e5c1',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"exclamation\"\n            style={{ color: '#000', width: '12px', height: '12px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>This Segmentation is loaded in the segmentation panel</div>\n      );\n      break;\n    case false:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\n          style={{\n            width: '18px',\n            height: '18px',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"arrow-left\"\n            style={{ color: '#000', width: '14px', height: '14px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => <div>Click to load segmentation.</div>;\n  }\n\n  const StatusPill = () => (\n    <div\n      className={classNames(\n        'group relative flex items-center justify-center px-8 rounded-full cursor-default bg-customgreen-100',\n        {\n          'hover:bg-customblue-100': !isHydrated,\n          'cursor-pointer': !isHydrated,\n        }\n      )}\n      style={{\n        height: '24px',\n        width: '55px',\n      }}\n      onClick={() => {\n        if (!isHydrated) {\n          if (onPillClick) {\n            onPillClick();\n          }\n        }\n      }}\n    >\n      <div className=\"pr-1 text-base font-medium leading-none text-black\">\n        SEG\n      </div>\n      <StatusIcon />\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusPill />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusPill />}\n    </>\n  );\n}\n"],"names":["ToolGroupService","toolGroupId","extensionManager","utilityModule","getModuleEntry","toolNames","Enums","exports","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","enabled","SegmentationDisplay","createToolGroupAndAddTools","async","segDisplaySet","viewportIndex","servicesManager","SegmentationService","HangingProtocolService","ViewportGridService","services","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForSEGDisplaySet","hydrateSegmentation","viewports","getState","updatedViewports","getViewportsRequireUpdate","setDisplaySetsForViewports","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","setDisplaySetsForViewport","viewportOptions","viewportType","initialImageOptions","preset","RESPONSE","UIViewportDialogService","Promise","resolve","reject","promptResult","message","actions","type","text","value","onSubmit","result","hide","show","onOutsideClick","_askHydrate","hydrateSEGDisplaySet","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportLabel","t","useTranslation","DisplaySetService","length","Error","viewportGrid","viewportGridService","useViewportGrid","viewportDialogState","viewportDialogApi","useViewportDialog","isToolGroupCreated","setToolGroupCreated","useState","selectedSegment","setSelectedSegment","isHydrated","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","segmentIndex","totalSegments","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","getCornerstoneViewport","useCallback","component","Component","orientation","onSegmentChange","direction","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_PIXEL_DATA_CREATED","SEGMENT_PIXEL_DATA_CREATED","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","activeViewport","includes","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","React","key","onPillClick","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","Icon","name","color","StatusPill","classNames","onClick","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","LoadingIndicatorProgress","progress","textBlock","Notification","id","propTypes","PropTypes","dataSource","customProps","defaultProps"],"sourceRoot":""}