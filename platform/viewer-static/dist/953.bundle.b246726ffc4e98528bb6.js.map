{"version":3,"file":"953.bundle.b246726ffc4e98528bb6.js","mappings":"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","sources":["file:////Users/nagatomo/workspace/replatform/ohif/RapidOHIFViewer/extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\n\nimport {\n  Notification,\n  ViewportActionBar,\n  useViewportGrid,\n  useViewportDialog,\n  Tooltip,\n  Icon,\n} from '@ohif/ui';\nimport classNames from 'classnames';\n\nconst { formatDate } = utils;\n\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\n  '@ohif/extension-measurement-tracking';\n\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\n\nfunction OHIFCornerstoneSRViewport(props) {\n  const {\n    children,\n    dataSource,\n    displaySets,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const { t } = useTranslation('SRViewport');\n\n  const {\n    DisplaySetService,\n    CornerstoneViewportService,\n  } = servicesManager.services;\n\n  // SR viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SR viewport should only have a single display set');\n  }\n\n  const srDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const [measurementCount, setMeasurementCount] = useState(1);\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\n    null\n  );\n  const [\n    referencedDisplaySetMetadata,\n    setReferencedDisplaySetMetadata,\n  ] = useState(null);\n  const [isHydrated, setIsHydrated] = useState(srDisplaySet.isHydrated);\n  const [element, setElement] = useState(null);\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  // Optional hook into tracking extension, if present.\n  let trackedMeasurements;\n  let sendTrackedMeasurementsEvent;\n\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\n    MEASUREMENT_TRACKING_EXTENSION_ID\n  );\n\n  // TODO: this is a hook that fails if we register/de-register\n  if (hasMeasurementTrackingExtension) {\n    const contextModule = extensionManager.getModuleEntry(\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\n    );\n\n    const useTrackedMeasurements = () => useContext(contextModule.context);\n\n    [\n      trackedMeasurements,\n      sendTrackedMeasurementsEvent,\n    ] = useTrackedMeasurements();\n  }\n\n  /**\n   * Store the tracking identifiers per viewport in order to be able to\n   * show the SR measurements on the referenced image on the correct viewport,\n   * when multiple viewports are used.\n   */\n  const setTrackingIdentifiers = useCallback(\n    measurementSelected => {\n      const { measurements } = srDisplaySet;\n\n      setTrackingUniqueIdentifiersForElement(\n        element,\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n        measurementSelected\n      );\n    },\n    [element, measurementSelected, srDisplaySet]\n  );\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const updateViewport = useCallback(\n    newMeasurementSelected => {\n      const {\n        StudyInstanceUID,\n        displaySetInstanceUID,\n        sopClassUids,\n      } = srDisplaySet;\n\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\n        return;\n      }\n\n      if (sopClassUids && sopClassUids.length > 1) {\n        // Todo: what happens if there are multiple SOP Classes? Why we are\n        // not throwing an error?\n        console.warn(\n          'More than one SOPClassUID in the same series is not yet supported.'\n        );\n      }\n\n      _getViewportReferencedDisplaySetData(\n        srDisplaySet,\n        newMeasurementSelected,\n        DisplaySetService\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\n        setMeasurementSelected(newMeasurementSelected);\n        setActiveImageDisplaySetData(referencedDisplaySet);\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\n\n        if (\n          referencedDisplaySet.displaySetInstanceUID ===\n          activeImageDisplaySetData?.displaySetInstanceUID\n        ) {\n          const { measurements } = srDisplaySet;\n\n          // it means that we have a new referenced display set, and the\n          // imageIdIndex will handle it by updating the viewport, but if they\n          // are the same we just need to use MeasurementService to jump to the\n          // new measurement\n          const viewportInfo = CornerstoneViewportService.getViewportInfoByIndex(\n            viewportIndex\n          );\n\n          const csViewport = CornerstoneViewportService.getCornerstoneViewport(\n            viewportInfo.getViewportId()\n          );\n\n          const imageIds = csViewport.getImageIds();\n\n          const imageIdIndex = imageIds.indexOf(\n            measurements[newMeasurementSelected].imageId\n          );\n\n          if (imageIdIndex !== -1) {\n            csViewport.setImageIdIndex(imageIdIndex);\n          }\n        }\n      });\n    },\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\n  );\n\n  const getCornerstoneViewport = useCallback(() => {\n    if (!activeImageDisplaySetData) {\n      return null;\n    }\n\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { measurements } = srDisplaySet;\n    const measurement = measurements[measurementSelected];\n\n    if (!measurement) {\n      return null;\n    }\n\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\n      image => image.imageId === measurement.imageId\n    );\n\n    return (\n      <Component\n        {...props}\n        // should be passed second since we don't want SR displaySet to\n        // override the activeImageDisplaySetData\n        displaySets={[activeImageDisplaySetData]}\n        viewportOptions={{\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\n        }}\n        onElementEnabled={onElementEnabled}\n        initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\n\n  const onMeasurementChange = useCallback(\n    direction => {\n      let newMeasurementSelected = measurementSelected;\n\n      if (direction === 'right') {\n        newMeasurementSelected++;\n\n        if (newMeasurementSelected >= measurementCount) {\n          newMeasurementSelected = 0;\n        }\n      } else {\n        newMeasurementSelected--;\n\n        if (newMeasurementSelected < 0) {\n          newMeasurementSelected = measurementCount - 1;\n        }\n      }\n\n      setTrackingIdentifiers(newMeasurementSelected);\n      updateViewport(newMeasurementSelected);\n    },\n    [\n      measurementSelected,\n      measurementCount,\n      updateViewport,\n      setTrackingIdentifiers,\n    ]\n  );\n\n  /**\n   Cleanup the SR viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Loading the measurements from the SR viewport, which goes through the\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\n   * we are changing the state here? isHydrated is always false at this stage, and\n   * if it is hydrated we don't event use the SR viewport.\n   */\n  useEffect(() => {\n    if (!srDisplaySet.isLoaded) {\n      srDisplaySet.load();\n    }\n    setIsHydrated(srDisplaySet.isHydrated);\n\n    const numMeasurements = srDisplaySet.measurements.length;\n    setMeasurementCount(numMeasurements);\n  }, [srDisplaySet]);\n\n  /**\n   * Hook to update the tracking identifiers when the selected measurement changes or\n   * the element changes\n   */\n  useEffect(() => {\n    if (!element || !srDisplaySet.isLoaded) {\n      return;\n    }\n    setTrackingIdentifiers(measurementSelected);\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\n\n  /**\n   * Todo: what is this, not sure what it does regarding the react aspect,\n   * it is updating a local variable? which is not state.\n   */\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  useEffect(() => {\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  }, [trackedMeasurements]);\n\n  /**\n   * Data fetching for the SR displaySet, which updates the measurements and\n   * also gets the referenced image displaySet that SR is based on.\n   */\n  useEffect(() => {\n    updateViewport(measurementSelected);\n  }, [dataSource, srDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetMetadata;\n\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onMeasurementChange}\n        getStatusComponent={() =>\n          _getStatusComponent({\n            srDisplaySet,\n            viewportIndex,\n            isTracked: false,\n            isRehydratable: srDisplaySet.isRehydratable,\n            isLocked,\n            sendTrackedMeasurementsEvent,\n          })\n        }\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: SeriesDescription,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportIndex === viewportIndex && (\n            <Notification\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSRViewport.defaultProps = {\n  customProps: {},\n};\n\nasync function _getViewportReferencedDisplaySetData(\n  displaySet,\n  measurementSelected,\n  DisplaySetService\n) {\n  const { measurements } = displaySet;\n  const measurement = measurements[measurementSelected];\n\n  const { displaySetInstanceUID } = measurement;\n\n  const referencedDisplaySet = DisplaySetService.getDisplaySetByUID(\n    displaySetInstanceUID\n  );\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\n}\n\nfunction _getStatusComponent({\n  srDisplaySet,\n  viewportIndex,\n  isRehydratable,\n  isLocked,\n  sendTrackedMeasurementsEvent,\n}) {\n  const onPillClick = () => {\n    sendTrackedMeasurementsEvent('RESTORE_PROMPT_HYDRATE_SR', {\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\n      viewportIndex,\n    });\n  };\n\n  // 1 - Incompatible\n  // 2 - Locked\n  // 3 - Rehydratable / Open\n  const state =\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (state) {\n    case 1:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n            backgroundColor: '#98e5c1',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"exclamation\"\n            style={{ color: '#000', width: '12px', height: '12px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is not compatible\n          <br />\n          with this application.\n        </div>\n      );\n      break;\n    case 2:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-black rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n          }}\n        >\n          <Icon\n            name=\"lock\"\n            style={{ color: '#05D97C', width: '8px', height: '11px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is currently read-only\n          <br />\n          because you are tracking measurements in\n          <br />\n          another viewport.\n        </div>\n      );\n      break;\n    case 3:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\n          style={{\n            width: '18px',\n            height: '18px',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"arrow-left\"\n            style={{ color: '#000', width: '14px', height: '14px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => <div>Click to restore measurements.</div>;\n  }\n\n  const StatusPill = () => (\n    <div\n      className={classNames(\n        'group relative flex items-center justify-center px-2 rounded-full cursor-default bg-customgreen-100',\n        {\n          'hover:bg-customblue-100': state === 3,\n          'cursor-pointer': state === 3,\n        }\n      )}\n      style={{\n        height: '24px',\n        width: '55px',\n      }}\n      onClick={() => {\n        if (state === 3) {\n          if (onPillClick) {\n            onPillClick();\n          }\n        }\n      }}\n    >\n      <span className=\"pr-1 text-lg font-bold leading-none text-black\">SR</span>\n      <StatusIcon />\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusPill />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusPill />}\n    </>\n  );\n}\n\n// function _onDoubleClick() {\n//   const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\n//     'manipulatorState'\n//   ).setters.cancelActiveManipulatorsForElement;\n//   const enabledElements = cornerstoneTools.store.state.enabledElements;\n//   enabledElements.forEach(element => {\n//     cancelActiveManipulatorsForElement(element);\n//   });\n// }\n\nexport default OHIFCornerstoneSRViewport;\n"],"names":["formatDate","utils","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","t","useTranslation","DisplaySetService","CornerstoneViewportService","services","length","Error","srDisplaySet","viewportGrid","viewportGridService","useViewportGrid","viewportDialogState","viewportDialogApi","useViewportDialog","measurementSelected","setMeasurementSelected","useState","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","isHydrated","setIsHydrated","element","setElement","viewports","activeViewportIndex","trackedMeasurements","sendTrackedMeasurementsEvent","registeredExtensionIds","includes","contextModule","getModuleEntry","useTrackedMeasurements","useContext","context","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","displaySetInstanceUID","sopClassUids","console","warn","async","displaySet","referencedDisplaySet","getDisplaySetByUID","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","component","Component","initialImageIndex","findIndex","image","viewportOptions","toolGroupId","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","setDisplaySetsForViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","React","key","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","isRehydratable","onPillClick","state","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","Icon","name","color","StatusPill","classNames","onClick","Tooltip","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","Notification","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","customProps","defaultProps"],"sourceRoot":""}